/*
Daytona Server API

Daytona Server API

API version: 0.24.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"encoding/json"
)

// checks if the PrebuildDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PrebuildDTO{}

// PrebuildDTO struct for PrebuildDTO
type PrebuildDTO struct {
	Branch            *string  `json:"branch,omitempty"`
	CommitInterval    *int32   `json:"commitInterval,omitempty"`
	ProjectConfigName *string  `json:"projectConfigName,omitempty"`
	TriggerFiles      []string `json:"triggerFiles,omitempty"`
}

// NewPrebuildDTO instantiates a new PrebuildDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrebuildDTO() *PrebuildDTO {
	this := PrebuildDTO{}
	return &this
}

// NewPrebuildDTOWithDefaults instantiates a new PrebuildDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPrebuildDTOWithDefaults() *PrebuildDTO {
	this := PrebuildDTO{}
	return &this
}

// GetBranch returns the Branch field value if set, zero value otherwise.
func (o *PrebuildDTO) GetBranch() string {
	if o == nil || IsNil(o.Branch) {
		var ret string
		return ret
	}
	return *o.Branch
}

// GetBranchOk returns a tuple with the Branch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrebuildDTO) GetBranchOk() (*string, bool) {
	if o == nil || IsNil(o.Branch) {
		return nil, false
	}
	return o.Branch, true
}

// HasBranch returns a boolean if a field has been set.
func (o *PrebuildDTO) HasBranch() bool {
	if o != nil && !IsNil(o.Branch) {
		return true
	}

	return false
}

// SetBranch gets a reference to the given string and assigns it to the Branch field.
func (o *PrebuildDTO) SetBranch(v string) {
	o.Branch = &v
}

// GetCommitInterval returns the CommitInterval field value if set, zero value otherwise.
func (o *PrebuildDTO) GetCommitInterval() int32 {
	if o == nil || IsNil(o.CommitInterval) {
		var ret int32
		return ret
	}
	return *o.CommitInterval
}

// GetCommitIntervalOk returns a tuple with the CommitInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrebuildDTO) GetCommitIntervalOk() (*int32, bool) {
	if o == nil || IsNil(o.CommitInterval) {
		return nil, false
	}
	return o.CommitInterval, true
}

// HasCommitInterval returns a boolean if a field has been set.
func (o *PrebuildDTO) HasCommitInterval() bool {
	if o != nil && !IsNil(o.CommitInterval) {
		return true
	}

	return false
}

// SetCommitInterval gets a reference to the given int32 and assigns it to the CommitInterval field.
func (o *PrebuildDTO) SetCommitInterval(v int32) {
	o.CommitInterval = &v
}

// GetProjectConfigName returns the ProjectConfigName field value if set, zero value otherwise.
func (o *PrebuildDTO) GetProjectConfigName() string {
	if o == nil || IsNil(o.ProjectConfigName) {
		var ret string
		return ret
	}
	return *o.ProjectConfigName
}

// GetProjectConfigNameOk returns a tuple with the ProjectConfigName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrebuildDTO) GetProjectConfigNameOk() (*string, bool) {
	if o == nil || IsNil(o.ProjectConfigName) {
		return nil, false
	}
	return o.ProjectConfigName, true
}

// HasProjectConfigName returns a boolean if a field has been set.
func (o *PrebuildDTO) HasProjectConfigName() bool {
	if o != nil && !IsNil(o.ProjectConfigName) {
		return true
	}

	return false
}

// SetProjectConfigName gets a reference to the given string and assigns it to the ProjectConfigName field.
func (o *PrebuildDTO) SetProjectConfigName(v string) {
	o.ProjectConfigName = &v
}

// GetTriggerFiles returns the TriggerFiles field value if set, zero value otherwise.
func (o *PrebuildDTO) GetTriggerFiles() []string {
	if o == nil || IsNil(o.TriggerFiles) {
		var ret []string
		return ret
	}
	return o.TriggerFiles
}

// GetTriggerFilesOk returns a tuple with the TriggerFiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrebuildDTO) GetTriggerFilesOk() ([]string, bool) {
	if o == nil || IsNil(o.TriggerFiles) {
		return nil, false
	}
	return o.TriggerFiles, true
}

// HasTriggerFiles returns a boolean if a field has been set.
func (o *PrebuildDTO) HasTriggerFiles() bool {
	if o != nil && !IsNil(o.TriggerFiles) {
		return true
	}

	return false
}

// SetTriggerFiles gets a reference to the given []string and assigns it to the TriggerFiles field.
func (o *PrebuildDTO) SetTriggerFiles(v []string) {
	o.TriggerFiles = v
}

func (o PrebuildDTO) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PrebuildDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Branch) {
		toSerialize["branch"] = o.Branch
	}
	if !IsNil(o.CommitInterval) {
		toSerialize["commitInterval"] = o.CommitInterval
	}
	if !IsNil(o.ProjectConfigName) {
		toSerialize["projectConfigName"] = o.ProjectConfigName
	}
	if !IsNil(o.TriggerFiles) {
		toSerialize["triggerFiles"] = o.TriggerFiles
	}
	return toSerialize, nil
}

type NullablePrebuildDTO struct {
	value *PrebuildDTO
	isSet bool
}

func (v NullablePrebuildDTO) Get() *PrebuildDTO {
	return v.value
}

func (v *NullablePrebuildDTO) Set(val *PrebuildDTO) {
	v.value = val
	v.isSet = true
}

func (v NullablePrebuildDTO) IsSet() bool {
	return v.isSet
}

func (v *NullablePrebuildDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrebuildDTO(val *PrebuildDTO) *NullablePrebuildDTO {
	return &NullablePrebuildDTO{value: val, isSet: true}
}

func (v NullablePrebuildDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrebuildDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
